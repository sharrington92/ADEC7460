---
title: "Assignment 2"
author: "Shaun Harrington"
format: 
  html:
    toc: true
    code-fold: true
editor_options: 
  chunk_output_type: console
---


<!-- Build 1 ETS model, 1 ARIMA model, 1 dynamic regression models, and 1 model where the previous forecasts are averaged. Use only 4 years of data to build your forecasts, and then estimate the models' performance on the 5th year.  Provide measures that assess the performance of your three models.  Which performed the best and why? -->

## Setup




```{r}
#| warning: false

knitr::opts_chunk$set(
	echo = TRUE,
	message = FALSE,
	warning = FALSE
)

library(tidyverse)
library(fpp3)
library(fredr)
library(scales)

theme_set(theme_bw())

if(!str_detect(basename(getwd()), "Time Series") & str_detect(dirname(getwd()), "Time Series")){
  repeat{
    setwd("../")
    if(str_detect(basename(getwd()), "Time Series")){
      break
    }
  }
} 

if(basename(getwd()) != "Assignment 2") setwd(file.path(getwd(), "Assignments", "Assignment 2"))



```


### Get Data

Gasoline station sales will be retrieved from the US Census. 


```{r}

url <- "https://www.census.gov/retail/marts/www/adv44700.txt"

# gasoline sales
data.gas <- read_table(url, skip = 1, n_max = 31) %>% 
  rename_with(~c("year", as.character(1:12))) %>% 
  pivot_longer(-year, names_to = "month", values_to = "sales.gas") %>% 
  mutate(date = ymd(paste(year, month, "1", sep = "-"))) %>% 
  select(date, sales.gas)

```


Gasoline and diesel prices will be retrieved via the Federal Reserve Economics Database.


```{r}

fred.data <- c(
  "GASREGW", #"CUUR0000SETB01", "TRFVOLUSM227NFWA", 
  "GASDESM"
) %>% 
  lapply(\(x){
    fredr(x, frequency = "m")
  }) %>% 
  reduce(., bind_rows) %>% 
  select(date, series_id, value) %>% 
  pivot_wider(names_from = series_id, values_from = value) %>% 
  rename(
    gas.price = "GASREGW",
    # cpi.gas = "CUUR0000SETB01", 
    # miles.driven = "TRFVOLUSM227NFWA", 
    diesel.price = "GASDESM"
  )

```


The data is split into two datasets, a training and testing dataset. The testing set are the most recent 12 months, while the training set are the 48 months preceding that. 


```{r}

data <- left_join(
  x = data.gas,
  y = fred.data,
  by = "date"
)

test <- data %>% 
  slice_max(order_by = date, n = 12) %>% 
  mutate(date = yearmonth(date)) %>% 
  tsibble()

train <- data %>% 
  slice_max(order_by = date, n = 12*10) %>% 
  mutate(date = yearmonth(date)) %>% 
  anti_join(y = test, by = "date") %>% 
  tsibble()


```


However, a true forecasts will not have gas and diesel prices available so we must adjust the test set for that. These prices will be estimated using a vector autoregression (VAR). 


```{r}

test.fx <- train %>% 
  model(VAR(vars(gas.price, diesel.price))) %>% 
  forecast(h = 12) 

test.fx %>% 
  autoplot(data %>% filter(year(date) > 2018) %>% tsibble())

```


Since gas and diesel prices are very difficult to forecast, we will consider a scenario forecasting approach with a low price (20th percentile), medium price (point estimate), and high price (80th percentile) scenarios. Despite actual prices being well above even the 95th percentile, the 80th percentile will be used and my knowledge of gas prices over the last 12 months shouldn't be a cause of bias. 


```{r}

test_all.scenarios <- test.fx %>% 
  hilo(level = c(80)) %>% 
  mutate(
    gas.price_med = .mean[,"gas.price"],
    gas.price_low = `80%`$gas.price$lower,
    gas.price_high = `80%`$gas.price$upper,
    
    diesel.price_med = .mean[,"diesel.price"],
    diesel.price_low = `80%`$diesel.price$lower,
    diesel.price_high = `80%`$diesel.price$upper
  ) %>% 
  select(
    date, gas.price_med, gas.price_high, gas.price_low, 
    diesel.price_med, diesel.price_high, diesel.price_low
  ) %>% 
  left_join(x = test, by = "date")

test.low <- test_all.scenarios %>% 
  select(date, sales.gas, contains("low")) %>% 
  rename_with(~str_replace_all(.x, "_low", ""))

test.med <- test_all.scenarios %>% 
  select(date, sales.gas, contains("med")) %>% 
  rename_with(~str_replace_all(.x, "_med", ""))

test.high <- test_all.scenarios %>% 
  select(date, sales.gas, contains("high")) %>% 
  rename_with(~str_replace_all(.x, "_high", ""))

```



## Preliminary Analysis


### Data Exploration

#### Gasoline Station Sales Plots

Gasoline station sales have been very volatile during the training set period, especially so since the COVID-19 pandemic started. The sales have been highly correlated with gas and diesel prices.


```{r}
#| fig-height: 4
#| eval: false
#| echo: false

train %>% 
  autoplot(sales.gas) +
  ggtitle("Monthly Gas Station Sales in US") +
  scale_y_continuous(labels = label_dollar())

```

```{r}
#| fig-height: 4

train %>% 
  # select(date, sales.gas, gas.price, miles.driven) %>% 
  pivot_longer(-date) %>% 
  ggplot(aes(x = date, y = value, color = name)) +
  geom_line() +
  facet_grid(name ~ ., scales = "free") +
  scale_y_continuous(labels = label_dollar())

```


Surprisingly, little if any seasonality exist in the series.


```{r}
#| fig-height: 4

train %>% 
  gg_season(sales.gas) +
  ggtitle("Seasonality Plot: Monthly Gas Station Sales in US") +
  scale_y_continuous(labels = label_dollar())

```




The ACF and PACF also back this up with a low correlation against the 12-month lag.


```{r}

train %>% 
  gg_tsdisplay(sales.gas, plot_type = "partial", lag_max = 36)

```



#### Decomposition

The STL Decomposition does appear to find some seasonal component, though it may not be statistically significant. This is especially so since it appears the large dip in March 2020, a likely result of COVID-19 shutdowns, has affected the seasonal component. The seasonal window was forced to be periodic, resulting in an unchanging seasonal pattern since only 4 years of data exist in the training set.


```{r}

train %>% 
  model(STL(sales.gas ~ season(window = 'periodic'))) %>% 
  components() %>% 
  autoplot() +
  scale_y_continuous(labels = label_dollar())

```



#### Correlations with Gas Station Sales


```{r}

train %>% 
  pivot_longer(-c(date, sales.gas)) %>% 
  ggplot(aes(y = (sales.gas), x = (value), color = name)) +
  geom_point() +
  facet_wrap(name ~ ., scales = "free")

```



## Modeling

#### Estimation




```{r}


(fit <- train %>% 
  model(
    "ets" = ETS(sales.gas),
    "arima" = ARIMA((sales.gas)),
    "dynamic" = ARIMA(sales.gas ~ gas.price + diesel.price)
  ) %>% 
   mutate(ensemble = (ets + arima + dynamic) / 3))


```

```{r}
fit %>% 
  select(-ensemble) %>% 
  glance()
```




### Forecast

The models were trained on data prior to `r max(as.Date(train$date)) + months(1)`. The forecast period is the interval `r lubridate::interval(min(as.Date(test$date)), max(as.Date(test$date)))`. Four forecasts are produced, one from each of the three scenarios (low, medium, and high) and then a perfect


#### High


```{r}

fx.high <- fit %>% 
        forecast(test.high)
  

  fx.high %>% 
    autoplot(
        # data %>% filter(year(date)>2020),
        level = NULL, size = .75, alpha = .75
      ) +
    autolayer(
      data %>% tsibble() %>% filter(year(date)>2020), sales.gas, 
      size = 1, alpha = .75#, linetype = "dashed"
    ) +
    ggtitle("US Gas Station Sales Out-of-Sample Forecast, High Scenario") + 
    scale_color_viridis_d() +
    scale_y_continuous(labels = label_dollar())
  
fx.high %>% 
  accuracy(test.high, measures = list(point_accuracy_measures, distribution_accuracy_measures)) %>% 
  arrange(RMSE)

```



#### Medium


```{r}

fx.med <- fit %>% 
        forecast(test.med)
  

fx.med %>% 
  autoplot(
      # data %>% filter(year(date)>2020),
      level = NULL, size = .75, alpha = .75
    ) +
  autolayer(
    data %>% tsibble() %>% filter(year(date)>2020), sales.gas, 
    size = 1, alpha = .75#, linetype = "dashed"
  ) +
  ggtitle("US Gas Station Sales Out-of-Sample Forecast, med Scenario") + 
  scale_color_viridis_d() +
  scale_y_continuous(labels = label_dollar())

```

```{r}

fx.med %>% 
  accuracy(test.med, measures = list(point_accuracy_measures, distribution_accuracy_measures)) %>% 
  arrange(RMSE)

```



#### Low


```{r}

fx.low <- fit %>% 
        forecast(test.low)
  

  fx.low %>% 
    autoplot(
        # data %>% filter(year(date)>2020),
        level = NULL, size = .75, alpha = .75
      ) +
    autolayer(
      data %>% tsibble() %>% filter(year(date)>2020), sales.gas, 
      size = 1, alpha = .75#, linetype = "dashed"
    ) +
    ggtitle("US Gas Station Sales Out-of-Sample Forecast, low Scenario") + 
    scale_color_viridis_d() +
    scale_y_continuous(labels = label_dollar())

```

```{r}

fx.low %>% 
  accuracy(test.low, measures = list(point_accuracy_measures, distribution_accuracy_measures)) %>% 
  arrange(RMSE)

```





#### With Perfect Information


```{r}

  fx <- fit %>% 
        forecast(test)
  

  fx %>% 
    autoplot(
        # data %>% filter(year(date)>2020),
        level = NULL, size = .75, alpha = .75
      ) +
    autolayer(
      data %>% tsibble() %>% filter(year(date)>2020), sales.gas, 
      size = 1, alpha = .75#, linetype = "dashed"
    ) +
    ggtitle("US Gas Station Sales Out-of-Sample Forecast") + 
    scale_color_viridis_d() +
    scale_y_continuous(labels = label_dollar())

```

```{r}

fx %>% 
  accuracy(test) %>% 
  arrange(RMSE)

```

```{r}

fx %>% 
  accuracy(test, measures = distribution_accuracy_measures) %>% 
  arrange(CRPS)

```



#### Bagged Forecasts


```{r}

sales_stl <- train %>% 
  model(STL(sales.gas))

sim <- sales_stl %>% 
  generate(new_data = train, times = 100, bootstrap_block_size = 24) %>% 
  select(-.model, -sales.gas)

```

```{r}

ets_forecasts <- sim %>% 
  model(ets = ETS(.sim)) %>% 
  forecast(h = 12)

ets_forecasts %>% 
  update_tsibble(key = .rep) %>% 
  autoplot(.mean) +
  autolayer(train, sales.gas) +
  guides(colour = "none") +
  labs(title = "Gasoline Station Sales: bootstrapped forecasts")

```

```{r}

```

