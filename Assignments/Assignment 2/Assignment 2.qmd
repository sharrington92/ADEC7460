---
title: "Assignment 2"
author: "Shaun Harrington"
format: 
  html:
    toc: true
    code-fold: true
editor_options: 
  chunk_output_type: console
---

<!-- Build 1 ETS model, 1 ARIMA model, 1 dynamic regression models, and 1 model where the previous forecasts are averaged. Use only 4 years of data to build your forecasts, and then estimate the models' performance on the 5th year.  Provide measures that assess the performance of your three models.  Which performed the best and why? -->

## Setup



```{r}
#| warning: false

knitr::opts_chunk$set(
	echo = TRUE,
	message = FALSE,
	warning = FALSE
)

library(tidyverse)
library(fpp3)
library(fredr)
library(scales)

theme_set(theme_bw())

if(basename(getwd()) != "Assignment 2") setwd(file.path(getwd(), "Assignments", "Assignment 2"))



```

### Get Data

```{r}

url <- "https://www.census.gov/retail/marts/www/adv44700.txt"

# gasoline sales
data.gas <- read_table(url, skip = 1, n_max = 31) %>% 
  rename_with(~c("year", as.character(1:12))) %>% 
  pivot_longer(-year, names_to = "month", values_to = "sales.gas") %>% 
  mutate(date = ymd(paste(year, month, "1", sep = "-"))) %>% 
  select(date, sales.gas)

```


```{r}

fred.data <- c("GASREGW", "CUUR0000SETB01", "TRFVOLUSM227NFWA", "GASDESM") %>% 
  lapply(\(x){
    fredr(x, frequency = "m")
  }) %>% 
  reduce(., bind_rows) %>% 
  select(date, series_id, value) %>% 
  pivot_wider(names_from = series_id, values_from = value) %>% 
  rename(
    gas.price = "GASREGW",
    cpi.gas = "CUUR0000SETB01", 
    miles.driven = "TRFVOLUSM227NFWA", 
    diesel.price = "GASDESM"
  )

```


```{r}

data <- left_join(
  x = data.gas,
  y = fred.data,
  by = "date"
)

test <- data %>% 
  slice_max(order_by = date, n = 12) %>% 
  mutate(date = yearmonth(date)) %>% 
  tsibble()

train <- data %>% 
  slice_max(order_by = date, n = 12*10) %>% 
  mutate(date = yearmonth(date)) %>% 
  anti_join(y = test, by = "date") %>% 
  tsibble()

```




## Preliminary Analysis


### Data Exploration

#### Gasoline Station Sales Plots



```{r}
#| fig-height: 4

train %>% 
  autoplot(sales.gas) +
  ggtitle("Monthly Gas Station Sales in US")

```

```{r}

train %>% 
  # select(date, sales.gas, gas.price, miles.driven) %>% 
  pivot_longer(-date) %>% 
  ggplot(aes(x = date, y = value, color = name)) +
  geom_line() +
  facet_grid(name ~ ., scales = "free")

```


```{r}
#| fig-height: 4

train %>% 
  gg_season(sales.gas) +
  ggtitle("Seasonality Plot: Monthly Gas Station Sales in US")

```





```{r}

train %>% 
  gg_tsdisplay(sales.gas, plot_type = "partial", lag_max = 36)

```


#### Decomposition


```{r}

train %>% 
  model(STL(sales.gas)) %>% 
  components() %>% 
  autoplot()

```


#### Correlations with Gas Station Sales



```{r}

train %>% 
  pivot_longer(-c(date, sales.gas)) %>% 
  ggplot(aes(y = log(sales.gas), x = (value), color = name)) +
  geom_point() +
  facet_wrap(name ~ ., scales = "free")

```


## Modeling

#### Estimation



```{r}


(fit <- train %>% 
  model(
    "ets" = ETS(sales.gas),
    "arima" = ARIMA((sales.gas)),
    "dynamic1" = ARIMA(sales.gas ~ gas.price),
    "dynamic2" = ARIMA(sales.gas ~ cpi.gas),
    "dynamic3" = ARIMA(sales.gas ~ diesel.price),
    "dynamic4" = ARIMA(sales.gas ~ miles.driven),
    "dynamic5" = ARIMA(sales.gas ~ gas.price + miles.driven + diesel.price),
    "dynamic6" = ARIMA(sales.gas ~ gas.price + diesel.price)
  ))


```



```{r}
glance(fit)
```



### Forecast

The models were trained on data prior to `r max(as.Date(train$date)) + months(1)`. The forecast period is the interval `r lubridate::interval(min(as.Date(test$date)), max(as.Date(test$date)))`. 



```{r}

  fx <- fit %>% 
        forecast(test)
  

  fx %>% 
    autoplot(
        # data %>% filter(year(date)>2020),
        level = NULL, size = .75, alpha = .75
      ) +
    autolayer(
      data %>% tsibble() %>% filter(year(date)>2020), sales.gas, 
      size = 1, alpha = .75#, linetype = "dashed"
    ) +
    ggtitle("US Gas Station Sales Out-of-Sample Forecast") + 
    scale_color_viridis_d() +
    scale_y_continuous(labels = label_dollar())

```



```{r}

fx %>% 
  accuracy(test) %>% 
  arrange(RMSE)

```


```{r}

fx %>% 
  accuracy(test, measures = distribution_accuracy_measures) %>% 
  arrange(CRPS)

```

#### Ensemble

```{r}

fx.rmse <- fx %>% 
  accuracy(test) %>% 
  select(.model, MAE) %>% 
  filter(.model %in% c("ets", "arima", "dynamic1")) %>% 
  mutate(
    weight = 1 / MAE,
    weight.norm = weight / sum(weight)
  )

 
fit2 <- fit %>% 
  select(ets, arima, dynamic1) %>% 
  mutate(
    ensemble = ets * fx.rmse$weight.norm[3] + arima*fx.rmse$weight.norm[1] + dynamic1*fx.rmse$weight.norm[2]
  ) 

fx2 <- fit2 %>% 
    forecast(test)

```


```{r}


  fx2 %>% 
    autoplot(
        # data %>% filter(year(date)>2020),
        level = NULL, size = .75, alpha = .75
      ) +
    autolayer(
      data %>% tsibble() %>% filter(year(date)>2020), sales.gas, 
      size = 1, alpha = .75#, linetype = "dashed"
    ) +
    ggtitle("US Gas Station Sales Out-of-Sample Forecast") + 
    scale_color_viridis_d() +
    scale_y_continuous(labels = label_dollar())

  fx2 %>% 
    accuracy(test) %>% 
    arrange(RMSE)
  
  fx2 %>% 
    accuracy(test, measures = distribution_accuracy_measures) %>% 
    arrange(CRPS)

```


#### VAR

```{r}

fit.var <- train %>% 
  model("var" = VAR(vars(sales.gas, cpi.gas)))

report(fit.var)

```


```{r}

fx.var <- fit.var %>% 
  forecast(test)

fx.var %>% 
  autoplot(
      data %>% filter(year(date)>2020),
      level = NULL, size = .75, alpha = .75
    ) 

fx.var %>% 
  accuracy(test) %>% 
  arrange(RMSE)

fx.var %>% 
  accuracy(test, measures = distribution_accuracy_measures) %>% 
  arrange(CRPS)

```



#### Model Statistics


```{r}

fit %>% 
  select(dynamic1) %>% 
  report()

```



```{r}

fit %>% 
  select(dynamic1) %>% 
  gg_tsresiduals()

```


```{r}

fit %>% 
  select(dynamic1) %>% 
  augment() %>% 
  features(.innov, ljung_box)

```
