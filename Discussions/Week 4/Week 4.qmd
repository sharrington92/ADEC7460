---
title: "Week 4 Discussion"
author: "Shaun Harrington"
format: html
editor_options: 
  chunk_output_type: console
---

## Setup

```{r}
#| warning: false

knitr::opts_chunk$set(
	echo = TRUE,
	message = FALSE,
	warning = FALSE
)

library(tidyverse)
library(fpp3)
library(readxl)
library(jsonlite)

theme_set(theme_bw())

if(basename(getwd()) != "Week 4") setwd(file.path(getwd(), "Discussions", "Week 4"))



# EIA Data
{
  # EIA_API_KEY is environmental variable. 
  #   Must register for an API key here: https://www.eia.gov/opendata/register.php
  eia.key <- Sys.getenv("EIA_API_KEY")
  
    
  fn_query_eia <- function(
    the_series_id, the_source = "steo", the_frequency = "monthly", the_facet = "seriesId",
    the_offset = 0, the_length = 5000, the_eia_key = eia.key){
    
    the_url = "https://api.eia.gov/v2/"
    
    # Query must be no more than 5,000
    if(the_length > 5000) break
    
    get_call <- paste0(the_url, the_source, "/data/?", paste(
      paste0("frequency=", the_frequency), 
      "data[0]=value", 
      paste0("facets[", the_facet, "][]=", the_series_id), 
      "sort[0][column]=period", 
      "sort[0][direction]=desc", 
      paste0("offset=", the_offset), 
      paste0("length=", the_length),
      sep = "&"
    ))

    eia_list <- fromJSON(str_c(get_call, "&api_key=", the_eia_key))
    
    eia_data <- eia_list$response$data
    
    eia_data %>% 
      as_tibble() %>% 
      return()
  }
  
  
  
  # HDD
  hdd <- "ZWHDPUS" %>% fn_query_eia() %>%
    rename(hdd = value) %>% 
    mutate(date = ym(period) %>% yearmonth()) %>% 
    select(date, hdd)
  
  # CDD
  cdd <- "ZWCDPUS" %>% fn_query_eia() %>%
    rename(cdd = value) %>% 
    mutate(date = ym(period) %>% yearmonth()) %>% 
    select(date, cdd)
  
  # Electricity
  consumption <- "ELTCPUS" %>% fn_query_eia(the_source = "total-energy", the_facet = "msn") %>%
    mutate(
      date = ym(period) %>% yearmonth(),
      GWh = value 
    ) %>% 
    select(date, GWh)
}


# FRED
{
  # Using CEI as proxy for monthly GDP
  gdp <- fredr::fredr("USPHCI") %>% 
    mutate(date = yearmonth(date)) %>% 
    rename(gdp = value) %>% 
    select(date, gdp)
  
}

data <- purrr::reduce(list(hdd, cdd, consumption, gdp), inner_join)



```

## Preliminary Analysis


### Data Preparation



```{r}

test <- data %>% 
  slice_max(order_by = date, n = 24) %>% 
  tsibble(index = date)
train <- data %>% 
  anti_join(y = test, by = "date") %>% 
  tsibble(index = date)


```



### Data Exploration

#### Time Plots 

```{r}
#| fig-height: 4

train %>% 
  autoplot(GWh) +
  ggtitle("Monthly Gigawatt-hour Electricity Sales in US")

```

#### Seasonality Plots


```{r}
#| fig-height: 4

train %>% 
  gg_season(GWh) +
  ggtitle("Seasonality Plot: Monthly Gigawatt-hour Electricity Sales in US")

```



#### Autocorrelation



```{r}

train %>% 
  gg_tsdisplay(GWh, plot_type = "partial", lag_max = 36)

```


#### Decomposition

```{r}

train %>% 
  model(STL(GWh)) %>% 
  components() %>% 
  autoplot()

```


## Modeling

#### Estimation


```{r}


(fit <- train %>% 
  model(
    "ets" = ETS(GWh),
    "ets.log" = ETS(log(GWh)),
    "arima" = ARIMA(GWh),
    "arima.log" = ARIMA(log(GWh)),
    "arimax" = ARIMA(GWh ~ hdd + cdd),
    "arimax.log" = ARIMA(log(GWh) ~ log(hdd) + log(cdd))
  ))


```



```{r}
glance(fit)
```


### Forecast

The models were trained on data prior to `r max(as.Date(train$date)) + months(1)`. The forecast period is the interval `r lubridate::interval(min(as.Date(test$date)), max(as.Date(test$date)))`. 


```{r}

  fx <- fit %>% 
        forecast(test)
  

  fx %>% 
    autoplot(
        data %>% filter(year(date)>2020),
        level = NULL
      ) +
        ggtitle("US Gigawatt-hour Electricity Sales Out-of-Sample Forecast")

```

#### Metrics


```{r}

fx %>% 
  accuracy(test)

```

